import 'package:flutter/material.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_auth/firebase_auth.dart';

class PaymentPage extends StatefulWidget {
  final String bookingId;

  const PaymentPage({Key? key, required this.bookingId}) : super(key: key);

  @override
  _PaymentPageState createState() => _PaymentPageState();
}

class _PaymentPageState extends State<PaymentPage> {
  final dbRef = FirebaseDatabase.instance.ref();
  final FirebaseAuth auth = FirebaseAuth.instance;
  int? cycles;
  double? amount;
  String? machineId;
  String? machineType;

  TextEditingController _cardNumberController = TextEditingController();
  TextEditingController _expiryDateController = TextEditingController();
  TextEditingController _cvvController = TextEditingController();

  int _coinsInserted = 0;
  bool _firstCoinInsertion = true;

  @override
  void initState() {
    super.initState();
    _fetchBookingDetails();
  }

  void _fetchBookingDetails() async {
    var snapshot = await dbRef.child('Bookings/${widget.bookingId}').get();
    if (snapshot.exists) {
      Map<dynamic, dynamic> bookingData = snapshot.value as Map<dynamic, dynamic>;
      setState(() {
        cycles = bookingData['cycles'];
        machineId = bookingData['machineId'];
        machineType = bookingData['machineType'];
        amount = (machineType == 'Dryer') ? (cycles ?? 0) * 2.0 : (cycles ?? 0) * 5.0;
      });
    }
  }

  void _handleCoinInsertion() {
    if (_firstCoinInsertion) {
      _showMessage("Please insert coins at the payment interface.");
      _firstCoinInsertion = false;
      return;
    }

    setState(() {
      _coinsInserted++;
    });

    if (_coinsInserted >= (amount ?? 0)) {
      _payByCoin();
    } else {
      _showMessage("Coins inserted: $_coinsInserted. Please insert more coins.");
    }
  }

  void _payByCoin() {
    _updateRevenueGenerated(amount!, machineId!);
    _updateRewardPoints(cycles ?? 0);
    _showMessage("Payment of $amount AED by coin is successful.");
    _coinsInserted = 0; // Reset the counter after successful payment
    _firstCoinInsertion = true; // Reset for the next payment
  }

  void _showCardDetailsDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Enter Card Details'),
          content: SingleChildScrollView(
            child: ListBody(
              children: <Widget>[
                TextFormField(
                  controller: _cardNumberController,
                  decoration: InputDecoration(hintText: 'Card Number (XXXX-XXXX-XXXX-XXXX)'),
                  keyboardType: TextInputType.number,
                  onChanged: (value) {
                    if (value.length > 19) {
                      _cardNumberController.value = TextEditingValue(
                        text: value.substring(0, 19),
                        selection: TextSelection.fromPosition(TextPosition(offset: 19)),
                      );
                    }
                  },
                ),
                TextFormField(
                  controller: _expiryDateController,
                  decoration: InputDecoration(hintText: 'Expiry Date (MM/YY)'),
                  keyboardType: TextInputType.number,
                ),
                TextFormField(
                  controller: _cvvController,
                  decoration: InputDecoration(hintText: 'CVV'),
                  keyboardType: TextInputType.number,
                ),
              ],
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: Text('Cancel'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            ElevatedButton(
              child: Text('Submit',
              style: TextStyle(
                color: Colors.white,
              )),
              onPressed: () {
                if (_cvvController.text.length != 3) {
                  _showMessage("Incorrect CVV. Please enter a valid 3-digit CVV.");
                  return;
                }
                if (!RegExp(r"^(0[1-9]|1[0-2])\/[0-9]{2}$").hasMatch(_expiryDateController.text)) {
                  _showMessage("Invalid expiry date format. Please use MM/YY format.");
                  return;
                }
                Navigator.of(context).pop();
                _payOnline();
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).colorScheme.primary,
              ),
            ),
          ],
        );
      },
    );
  }

  void _payOnline() {
    _updateRevenueGenerated(amount!, machineId!);
    _updateRewardPoints(cycles ?? 0);
    _showMessage("Payment of $amount AED by card is successful.");
  }

  void _updateRevenueGenerated(double amountPaid, String machineId) {
    DatabaseReference revenueRef = dbRef.child('Machine/$machineId/Revenue_Generated_AED');
    revenueRef.once().then((DatabaseEvent event) {
      if (event.snapshot.exists) {
        double currentRevenue = double.parse(event.snapshot.value.toString());
        double updatedRevenue = currentRevenue + amountPaid;
        revenueRef.set(updatedRevenue.toString());
      } else {
        revenueRef.set(amountPaid.toString());
      }
    });
  }

  void _updateRewardPoints(int numberOfCycles) {
    if (auth.currentUser?.email != null) {
      dbRef.child('Client').orderByChild('Email').equalTo(auth.currentUser!.email!).once().then((DatabaseEvent event) {
        if (event.snapshot.exists) {
          Map<dynamic, dynamic> data = event.snapshot.value as Map<dynamic, dynamic>;
          data.forEach((key, value) {
            int currentPoints = value['Reward_Points'];
            int pointsToAdd = (machineType == 'Dryer') ? numberOfCycles * 2 : numberOfCycles * 5;
            int newPoints = currentPoints + pointsToAdd;
            dbRef.child('Client/$key/Reward_Points').set(newPoints);
            _showMessage("Congratulations! You've earned $pointsToAdd reward points.");
          });
        }
      });
    }
  }

  void _showMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message))
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          "Payment",
          style: TextStyle(
            color: Colors.white,
            shadows: [
              Shadow(
                offset: Offset(1.0, 1.0),
                blurRadius: 3.0,
                color: Color.fromARGB(150, 0, 0, 0),
              ),
            ],
          ),
        ),
        backgroundColor: Theme.of(context).colorScheme.primary,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Booking ID: ${widget.bookingId}',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color:Theme.of(context).colorScheme.primary,
              ),
            ),
            if (cycles != null)
              Text(
                'Number of Cycles: $cycles',
                style: TextStyle(
                  fontSize: 16,
                  color: Theme.of(context).colorScheme.primary, 
                ),
              ),
            if (amount != null)
              Text(
                'Amount to Pay: $amount AED',
                style: TextStyle(
                  fontSize: 16,
                  color: Theme.of(context).colorScheme.primary,
                ),
              ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _handleCoinInsertion();
              },
              child: const Text('Pay by Coin',
              style: TextStyle(
                color: Colors.white,
              )),
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).colorScheme.primary,  
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _showCardDetailsDialog,
              child: const Text('Pay Online', style: TextStyle(
                color: Colors.white,
              )),
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).colorScheme.primary, 
              ),
            ),
          ],
        ),
      ),
    );
  }
}