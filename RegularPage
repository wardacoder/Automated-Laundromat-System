import 'package:automated_laudromat/BookingPage';
import 'package:automated_laudromat/Feedback.dart';
import 'package:automated_laudromat/FeedbackListPage.dart';
import 'package:automated_laudromat/FeedbackListAdminPage.dart';
import 'package:automated_laudromat/widget/featurewidget.dart';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';

class RegularMemberPage extends StatefulWidget {
  @override
  _RegularMemberPageState createState() => _RegularMemberPageState();
}

class _RegularMemberPageState extends State<RegularMemberPage> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final DatabaseReference _database = FirebaseDatabase.instance.reference();
  late String _userId;

  @override
  void initState() {
    super.initState();
    _userId = _auth.currentUser!.uid;
  }

  Stream<Map<dynamic, dynamic>?> getUserDataStream() {
    String? email = _auth.currentUser?.email;
    if (email == null) {
      return Stream.value(null);
    }
    return _database.child('Client')
      .orderByChild('Email')
      .equalTo(email)
      .onValue
      .map((event) {
        if (event.snapshot.exists) {
          Map<dynamic, dynamic> data = event.snapshot.value as Map<dynamic, dynamic>;
          return data.values.first as Map<dynamic, dynamic>;
        }
        return null;
      });
  }

  void _logout() async {
    await _auth.signOut();
    // Navigate back to the login page
    Navigator.pushNamedAndRemoveUntil(context, '/', (route) => false);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Automated Laundromat System',
      style: TextStyle(
      color: Colors.white, 
      shadows: [
        Shadow(
          offset: Offset(1.0, 1.0),
          blurRadius: 3.0, 
          color: Color.fromARGB(150, 0, 0, 0), 
        ),
      ],
    ),
  ),
        backgroundColor: Theme.of(context).colorScheme.primary,
        actions: [
          IconButton(
            icon: Icon(Icons.logout),
            onPressed: _logout,
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            StreamBuilder<Map<dynamic, dynamic>?>(
              stream: getUserDataStream(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.active && snapshot.hasData) {
                  Map<dynamic, dynamic> userData = snapshot.data!;
                  String name = userData['Name'];
                  int rewardPoints = userData['Reward_Points'];
                  String userType = userData['Client_Type'];
                  return userInfoSection(name, rewardPoints, userType);
                } else {
                  return CircularProgressIndicator();
                }
              },
            ),
            featureSection(),
            pricingSection(),
          ],
        ),
      ),
    );
  }

  Widget userInfoSection(String name, int rewardPoints, String userType) {
    return Container(
      padding: const EdgeInsets.all(20),
      child: Column(
        children: [
          Text(
            'Welcome, $name!',
            style: TextStyle(
              fontSize: 22,
              fontWeight: FontWeight.bold,
            ),
          ),
          SizedBox(height: 10),
          Text(
            'Reward Points: $rewardPoints',
            style: TextStyle(fontSize: 15),
          ),
          SizedBox(height: 15),
          ElevatedButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const BookingPage()),
              );
            },
            child: const Text('Book a Machine'),
          ),
          SizedBox(height: 10),
          ElevatedButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => FeedbackPage()),
              );
            },
            child: const Text('Submit Feedback'),
          ),
          SizedBox(height: 10),
          ElevatedButton(
            onPressed: () {
              if(userType == "Regular Member"){
                Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => FeedbackListPage()),
              );
              }else{
                Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => FeedbackListAdminPage()),
              );
              }
            },
            child: const Text('View Feedback'),
          ),
        ],
      ),
    );
  }

  Widget featureSection() {
    return Container(
      padding: const EdgeInsets.all(20),
      child: const Column(
        children: [
          Text(
            'Key Features',
            style: TextStyle(
              fontSize: 17,
              fontWeight: FontWeight.bold,
            ),
          ),
          SizedBox(height: 15),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              FeatureItem(title: '24/7 Monitoring', icon: Icons.security_outlined),
              FeatureItem(title: 'Easy Booking', icon: Icons.calendar_today),
              FeatureItem(title: 'Flexible Payment', icon: Icons.payment),
            ],
          ),
        ],
      ),
    );
  }

  Widget pricingSection() {
    return Container(
      padding: const EdgeInsets.all(20),
      child: Column(
        children: const [
          Text(
            'Pricing',
            style: TextStyle(
              fontSize: 17,
              fontWeight: FontWeight.bold,
            ),
          ),
          SizedBox(height: 10),
          Text(
            'Washing Machine: 5 AED per cycle',
            style: TextStyle(fontSize: 14),
          ),
          Text(
            'Drying Machine: 2 AED per cycle',
            style: TextStyle(fontSize: 14),
          ),
          SizedBox(height: 10),
          Text(
            'Special offers available for regular clients!',
            style: TextStyle(
              fontSize: 14,
              fontStyle: FontStyle.italic,
            ),
          ),
        ],
      ),
    );
  }
}