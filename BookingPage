import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:intl/intl.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:automated_laudromat/PaymentPage';

class BookingPage extends StatefulWidget {
  const BookingPage({Key? key}) : super(key: key);

  @override
  _BookingPageState createState() => _BookingPageState();
}

class _BookingPageState extends State<BookingPage> {
  DateTime? selectedDate;
  TimeOfDay? selectedTime;
  DateTime focusedDay = DateTime.now();
  CalendarFormat _calendarFormat = CalendarFormat.month;
  final dbRef = FirebaseDatabase.instance.ref();
  Map<String, String> availableMachines = {};
  String? bookingId;
  String? selectedMachineType;

  void _pickTime() async {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("Select Time"),
          content: Container(
            width: double.maxFinite,
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: 17,
              itemBuilder: (BuildContext context, int index) {
                int hour = 9 + (index ~/ 2);
                int minute = (index % 2) * 30;
                TimeOfDay time = TimeOfDay(hour: hour, minute: minute);

                return ListTile(
                  title: Text(time.format(context)),
                  onTap: () {
                    setState(() {
                      selectedTime = time;
                      availableMachines = {};
                    });
                    Navigator.of(context).pop();
                  },
                );
              },
            ),
          ),
        );
      },
    );
  }

  String formatDate(DateTime? date) {
    if (date == null) return '';
    return DateFormat('yyyy-MM-dd').format(date);
  }

  String formatTime(TimeOfDay? time) {
    if (time == null) return '';
    final now = DateTime.now();
    final dt = DateTime(now.year, now.month, now.day, time.hour, time.minute);
    return DateFormat('HH:mm').format(dt);
  }

  void _selectMachineType() async {
    await showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Select Machine Type"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ElevatedButton(
                onPressed: () {
                  setState(() {
                    selectedMachineType = "Dryer";
                  });
                  Navigator.of(context).pop();
                  _viewAvailableMachines();
                },
                child: const Text("Dryer"),
              ),
              SizedBox(height:10),
              ElevatedButton(
                onPressed: () {
                  setState(() {
                    selectedMachineType = "Washer";
                  });
                  Navigator.of(context).pop();
                  _viewAvailableMachines();
                },
                child: const Text("Washer"),
              ),
            ],
          ),
        );
      },
    );
  }

  void _viewAvailableMachines() async {
    if (selectedDate == null || selectedTime == null || selectedMachineType == null) {
      _showMessage("Please select date, time, and machine type to view available machines.");
      return;
    }

    String formattedDate = formatDate(selectedDate);
    String formattedTime = formatTime(selectedTime);
    Map<String, String> tempAvailableMachines = {};

    for (var i = 1; i <= 4; i++) {
      String machineId = 'Machine_00$i';
      String path = 'Machine/$machineId/Bookings/$formattedDate/$formattedTime';
      var snapshot = await dbRef.child(path).get();
      var machineTypeSnapshot = await dbRef.child('Machine/$machineId/Machine_Type').get();
      var machineFeatureSnapshot = await dbRef.child('Machine/$machineId/Feature').get();

      if (snapshot.exists && snapshot.value == "Available" && machineTypeSnapshot.value == selectedMachineType) {
        String machineFeature = machineFeatureSnapshot.value.toString();
        tempAvailableMachines[machineId] = machineFeature;
      }
    }

    setState(() {
      availableMachines = tempAvailableMachines;
    });

    if (availableMachines.isEmpty) {
      _showMessage("No $selectedMachineType machines are available at this slot.");
    } else {
      _showAvailableMachinesDialog();
    }
  }

  void _selectCycles(String machineId) async {
    TextEditingController _cyclesController = TextEditingController();

    await showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Enter Number of Cycles"),
          content: TextField(
            controller: _cyclesController,
            keyboardType: TextInputType.number,
            decoration: const InputDecoration(
              hintText: "Number of cycles (max 2)",
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: const Text('Cancel'),
              onPressed: () => Navigator.of(context).pop(),
            ),
            TextButton(
              child: const Text('Confirm'),
              onPressed: () {
                int cycles = int.tryParse(_cyclesController.text) ?? 0;
                if (cycles > 0 && cycles <= 2) {
                  Navigator.of(context).pop();
                  _bookMachine(machineId, cycles);
                } else {
                  _showMessage("Please enter a valid number of cycles (1-2).");
                }
              },
            ),
          ],
        );
      },
    );
  }

  void _bookMachine(String machineId, int cycles) async {
    String formattedDate = formatDate(selectedDate);
    String formattedTime = formatTime(selectedTime);
    String path = 'Machine/$machineId/Bookings/$formattedDate/$formattedTime';
    await dbRef.child(path).set("Booked");

    var bookingCountSnapshot = await dbRef.child('BookingCount').get();
    int bookingCount = bookingCountSnapshot.exists ? int.parse(bookingCountSnapshot.value.toString()) : 0;
    bookingCount++;
    await dbRef.child('BookingCount').set(bookingCount);

    String bookingId = 'booking${bookingCount.toString().padLeft(3, '0')}';
    await dbRef.child('Bookings/$bookingId').set({
      'machineId': machineId,
      'date': formattedDate,
      'time': formattedTime,
      'cycles': cycles,
      'machineType': selectedMachineType,
    });

    setState(() {
      this.bookingId = bookingId;
    });

    Navigator.of(context).pop(); 
    _showMessage("Booking Confirmed for $machineId for $cycles cycle(s). Your booking ID is $bookingId.");
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => PaymentPage(bookingId: bookingId)),
    );
  }

  void _showAvailableMachinesDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text("Select a Machine to Book"),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: availableMachines.entries.map((entry) {
                String machineId = entry.key;
                String machineFeature = entry.value;
                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8.0),
                  child: ElevatedButton(
                    onPressed: () => _selectCycles(machineId),
                    child: Column(
                      children: [
                        Text(machineId),
                        Text('Feature: $machineFeature'),
                      ],
                    ),
                  ),
                );
              }).toList(),
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: const Text('Cancel'),
              onPressed: () => Navigator.of(context).pop(),
            ),
          ],
        );
      },
    );
  }

  void _showMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message))
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Book a Machine",style: TextStyle(
      color: Colors.white, 
      shadows: [
        Shadow(
          offset: Offset(1.0, 1.0),
          blurRadius: 3.0, 
          color: Color.fromARGB(150, 0, 0, 0), 
        ),
      ],
    ),
  ),
        backgroundColor: Theme.of(context).colorScheme.primary,
      ),
      body: SingleChildScrollView(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              TableCalendar(
                firstDay: DateTime.utc(2020, 1, 1),
                lastDay: DateTime.utc(2030, 12, 31),
                focusedDay: focusedDay,
                calendarFormat: _calendarFormat,
                selectedDayPredicate: (day) => isSameDay(selectedDate, day),
                onDaySelected: (selectedDay, focusedDay) {
                  setState(() {
                    selectedDate = selectedDay;
                    this.focusedDay = focusedDay;
                    availableMachines = {};
                  });
                },
                onPageChanged: (focusedDay) {
                  this.focusedDay = focusedDay;
                },
                onFormatChanged: (format) {
                  if (_calendarFormat != format) {
                    setState(() {
                      _calendarFormat = format;
                    });
                  }
                },
                headerStyle: const HeaderStyle(
                  formatButtonVisible: false,
                ),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: selectedDate == null ? null : _pickTime,
                child: const Text('Select Time'),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: selectedDate == null || selectedTime == null ? null : _selectMachineType,
                child: const Text('View Available Machines'),
              ),
              if (selectedDate != null)
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Text('Selected Date: ${formatDate(selectedDate)}'),
                ),
              if (selectedTime != null)
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Text('Selected Time: ${formatTime(selectedTime)}'),
                ),
            ],
          ),
        ),
      ),
    );
  }
}